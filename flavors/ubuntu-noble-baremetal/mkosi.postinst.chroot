#!/usr/bin/env bash

set -e
set -x

export DEBIAN_FRONTEND=noninteractive
export HOME="/root" # No HOME is set otherwise, force it

ls -la /etc/resolv.conf || true
cat /etc/resolv.conf || true

echo "chrooted postinst for ubuntu-noble-baremetal...."

echo "PATH: $PATH" || true
echo "HOME: $HOME" || true
echo "http_proxy: ${http_proxy}" || true

# add ssh keys

ssh-import-id gh:rpardini
ssh-import-id gh:ArdaXi
#ssh-import-id gh:willemm
ssh-import-id gh:yifongau

ls -la "${HOME}/.ssh/authorized_keys"
cat /root/.ssh/authorized_keys

# update package lists so apt is ready-to-go when image deployed
apt-get -y update

# let NetworkManager manage the network
touch /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
ls -la /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
sed "s/managed=\(.*\)/managed=true/g" -i /etc/NetworkManager/NetworkManager.conf
systemctl mask systemd-networkd.service

# NOT if using cloud-init... but yes for now
systemctl disable NetworkManager-wait-online.service

# mask stuff for tpm2 / pcrlock that is enabled when machine is booted via uki, but systemd-pcrlock not available in Ubuntu (yet?)
systemctl mask systemd-pcrlock-file-system.service
systemctl mask systemd-pcrlock-firmware-code.service
systemctl mask systemd-pcrlock-firmware-config.service
systemctl mask systemd-pcrlock-machine-id.service
systemctl mask systemd-pcrlock-make-policy.service
systemctl mask systemd-pcrlock-secureboot-policy.service
systemctl mask systemd-tpm2-setup.service

# locale
#sed -i 's/# en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
#locale-gen

# Config systemd repart to grow the rootfs on first boot
mkdir -p /usr/lib/repart.d
cat <<- EOD > /usr/lib/repart.d/10-root.conf
	[Partition]
	Type=root
EOD
cat /usr/lib/repart.d/10-root.conf

# Remove sshd host keys so they're generated on first boot # @TODO: not that simple; smth must be setup to regen; easier to use cloud-init
# rm -fv /etc/ssh/ssh_host_*

# Create a script to reboot the system in PXE mode again.
mkdir -p /usr/local/sbin
cat <<- 'EOD' > /usr/local/sbin/pxe-boot-this
#!/bin/bash
set -e 
set -x
declare pxe_efi_bootnum="$(efibootmgr | grep "IPV4" | cut -d " " -f 1 | sed -e 's/Boot//g' | sed -e 's/*//g')"
echo "PXE bootnum: ${pxe_efi_bootnum}"
efibootmgr --bootnext "${pxe_efi_bootnum}"
sync
echo "Rebooting in PXE mode in 2s..."
sleep 2
reboot -f
EOD
chmod +x /usr/local/sbin/pxe-boot-this

echo "DONE!"

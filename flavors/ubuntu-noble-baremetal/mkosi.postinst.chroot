#!/usr/bin/env bash

set -e

export DEBIAN_FRONTEND=noninteractive
export HOME="/root" # No HOME is set otherwise, force it

ls -la /etc/resolv.conf || true
cat /etc/resolv.conf || true

echo "chrooted postinst for ubuntu-noble-baremetal...."

echo "PATH: $PATH" || true
echo "HOME: $HOME" || true
echo "http_proxy: ${http_proxy}" || true

# grub fixage @TODO this duplicates the cmdline used in mkosi
echo "---------------- GRUB -------------------"
dpkg -l | grep -i grub
cat <<- EOD > /etc/default/grub.d/98-simple.cfg
	GRUB_CMDLINE_LINUX_DEFAULT="rw intel_iommu=on loglevel=7 console=ttyS0,115200 console=tty0 console=ttyUSB0,115200"
	GRUB_TIMEOUT_STYLE=menu
	GRUB_TIMEOUT=3
	GRUB_DISABLE_SUBMENU=y
	GRUB_DISABLE_OS_PROBER=false
	GRUB_GFXPAYLOAD=keep
EOD

echo "---------------- GRUB -------------------"

# add ssh keys

ssh-import-id gh:rpardini
ssh-import-id gh:ArdaXi
#ssh-import-id gh:willemm
ssh-import-id gh:yifongau

ls -la "${HOME}/.ssh/authorized_keys"
cat /root/.ssh/authorized_keys

# update package lists so apt is ready-to-go when image deployed
apt-get -y update

# let NetworkManager manage the network
touch /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
ls -la /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
sed "s/managed=\(.*\)/managed=true/g" -i /etc/NetworkManager/NetworkManager.conf
systemctl mask systemd-networkd.service

# make cloud-init happy by waiting for network (NetworkManager version, would be different for systemd-networkd/netplan)
systemctl enable NetworkManager-wait-online.service

# mask stuff for tpm2 / pcrlock that is enabled when machine is booted via uki, but systemd-pcrlock not available in Ubuntu (yet?)
systemctl mask systemd-pcrlock-file-system.service
systemctl mask systemd-pcrlock-firmware-code.service
systemctl mask systemd-pcrlock-firmware-config.service
systemctl mask systemd-pcrlock-machine-id.service
systemctl mask systemd-pcrlock-make-policy.service
systemctl mask systemd-pcrlock-secureboot-policy.service
systemctl mask systemd-tpm2-setup.service

# locale fix
sed -i 's/# en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
locale-gen

# Config systemd repart to manage the rootfs on first boot
mkdir -p /usr/lib/repart.d
cat <<- EOD > /usr/lib/repart.d/10-root.conf
	[Partition]
	Type=root
EOD
cat /usr/lib/repart.d/10-root.conf

# Remove sshd host keys so they're generated on first boot # @TODO: not that simple; smth must be setup to regen; easier to use cloud-init
# rm -fv /etc/ssh/ssh_host_*

# Create a script to reboot the system in PXE mode again.
mkdir -p /usr/local/sbin
cat <<- 'EOD' > /usr/local/sbin/pxe-boot-this
	#!/bin/bash
	set -e 
	declare pxe_efi_bootnum="$(efibootmgr | grep "IPV4" | cut -d " " -f 1 | sed -e 's/Boot//g' | sed -e 's/*//g')"
	echo "PXE bootnum: ${pxe_efi_bootnum}"
	efibootmgr --bootnext "${pxe_efi_bootnum}"
	sync
	echo "Rebooting in PXE mode in 2s..."
	sleep 2
	reboot -f
EOD
chmod +x /usr/local/sbin/pxe-boot-this

# Black list nouveau module, so nvidia can load.
cat << EOF | sudo tee /etc/modprobe.d/blacklist-nouveau.conf
blacklist nouveau
options nouveau modeset=0
EOF

# Actually, obliterate the nouveau module away so mkosi don't pick it up for its initrd either
find /usr/lib -type f -name '*nouveau*' -delete

# Configure for (not used in image, but for later runtime)
# /etc/initramfs-tools/initramfs.conf
cat <<- EOD > /etc/initramfs-tools/initramfs.conf
	MODULES=most
	BUSYBOX=auto
	COMPRESS=zstd
	DEVICE=
	NFSROOT=auto
	RUNSIZE=10%
	FSTYPE=auto
EOD

# Let's setup an /etc/fstab so things are mounted and rootfs is grown
cat <<- EOD > /etc/fstab
	PARTLABEL="root-x86-64" / ext4 defaults,noatime,x-systemd.growfs 0 1
	# attention: the way systemd wants it, in /boot; I'd rather have it in /boot/efi cos I'm ancient
	PARTLABEL="esp" /boot vfat defaults 0 2 
EOD
cat /etc/fstab

# Create a script to restore grub normalcy
mkdir -p /usr/local/sbin
cat <<- 'EOD' > /usr/local/sbin/restore-grub-normalcy
	#!/bin/bash
	set -e
	rm -rf /boot/ubuntu /boot/loader /boot/EFI
	mkdir -p /boot/EFI
	update-initramfs -k all -c
	grub-install --efi-directory /boot --bootloader-id=fatso 
	update-grub
EOD
chmod +x /usr/local/sbin/restore-grub-normalcy

#### k8s stuff
## containerd; using a prebuilt deb with many necessary tools in k8s-worker-containerd

declare latest_release_version
latest_release_version=$(curl -sL "https://api.github.com/repos/armsurvivors/k8s-worker-containerd/releases/latest" | jq -r '.tag_name')

declare deb_file down_url down_dir full_deb_path

deb_file="k8s-worker-containerd_amd64_noble.deb"
down_url="https://github.com/armsurvivors/k8s-worker-containerd/releases/latest/download/${deb_file}"

down_dir="/root/k8s-worker-containerd"
mkdir -p "${down_dir}"

full_deb_path="${down_dir}/${latest_release_version}_${deb_file}"

echo "Will download ${full_deb_path} from latest release..."
wget --progress=dot:mega --local-encoding=UTF-8 --output-document="${full_deb_path}.tmp" "${down_url}"
mv -v "${full_deb_path}.tmp" "${full_deb_path}"

apt -y install "${full_deb_path}"
rm -v "/${full_deb_path}"

# Check by running it under chroot
containerd --version

# Enable its systemd service
systemctl enable containerd.service

# Configure containerd to use systemd cgroup driver
mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml

# Keep a copy of the original config
cp -v /etc/containerd/config.toml /etc/containerd/config.toml.orig

# Manipulating .toml in bash is even worse than YAML. This should NOT be done here.
if grep -q SystemdCgroup /etc/containerd/config.toml; then
	# If it's already there make sure it's on
	sed -i -e 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
else
	# Terrible hack to add SystemdCgroup.
	sed -i -e 's/runtimes.runc.options]/runtimes.runc.options]\n            SystemdCgroup = true/' /etc/containerd/config.toml
fi

echo "Config cri-tools to use containerd..."
cat <<- EOD > /etc/crictl.yaml
	runtime-endpoint: unix:///var/run/containerd/containerd.sock
EOD

### k8s-related settings
echo "Configuring systemd-network to not interefere with Cilium..."
# https://docs.cilium.io/en/stable/operations/system_requirements/#systemd-based-distributions
cat <<- EOD > /etc/systemd/networkd.conf
	[Network]
	ManageForeignRoutes=no
	ManageForeignRoutingPolicyRules=no
EOD

echo "Module br_netfilter ..."
cat <<- EOF > /etc/modules-load.d/k8s.conf
	br_netfilter
EOF

echo "Tuning bridge-nf-call-iptables/ip6tables in sysctl..."
cat <<- EOF > /etc/sysctl.d/k8s.conf
	net.bridge.bridge-nf-call-iptables = 1
	net.bridge.bridge-nf-call-ip6tables = 1
	net.ipv4.ip_forward = 1
	net.ipv6.conf.all.forwarding = 1
	net.ipv6.conf.all.disable_ipv6 = 0
	net.ipv4.tcp_congestion_control = bbr
	vm.overcommit_memory = 1
	kernel.panic = 10
	kernel.panic_on_oops = 1
	fs.inotify.max_user_instances = 524288
	fs.inotify.max_user_watches = 524288
EOF

### k8s proper, via official deb pkg repos
K8S_MAJOR_MINOR="1.28"
echo "Adding k8s binaries version ${K8S_MAJOR_MINOR}"

# Grab the GPG key
mkdir -p /etc/apt/keyrings
curl -fsSL "https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/Release.key" | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add the SUSE-OBS repository
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/ /" > "/etc/apt/sources.list.d/kubernetes.list"
apt -y update

# Install the k8s binaries
apt -y install "kubeadm" "kubelet" "kubectl"

kubeadm version
systemctl enable kubelet.service

# Hold the k8s packages
apt-mark hold kubeadm kubelet kubectl

# Clean apt cache
apt -y clean

# Show the largest folders
du -h -d 3 -x / | sort -h | tail -n 20

echo "DONE!"
